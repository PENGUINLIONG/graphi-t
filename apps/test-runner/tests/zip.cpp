#include "gft/assert.hpp"
#include "gft/log.hpp"
#include "gft/test.hpp"
#include "gft/util.hpp"
#include "gft/zip.hpp"

using namespace liong;

L_TEST(ZipRoundTrip) {
  std::string file_name = "_123/123.txt";
  std::vector<uint8_t> data { 1, 2, 3 };

  zip::ZipArchive ar {};
  ar.add_file(file_name, data.data(), data.size());

  std::vector<uint8_t> bytes;
  ar.to_bytes(bytes);

  zip::ZipArchive ar2 = zip::ZipArchive::from_bytes(bytes);
  const zip::ZipFileRecord& record = ar2.get_file(file_name);
  L_ASSERT(record.size == 3);
  for (size_t i = 0; i < data.size(); ++i) {
    L_ASSERT(data.at(i) == ((const uint8_t*)record.data)[i]);
  }
}

L_TEST(ZipMinimalFile) {
  std::vector<uint8_t> min_zip = {
    0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  zip::ZipArchive ar = zip::ZipArchive::from_bytes(min_zip);
  L_ASSERT(ar.records.size() == 0);
}

L_TEST(ZipExtractReal) {
  // A Zip file generated on macOS with the `zip` command with three files:
  // - `_1`: "1"
  // - `_2`: <empty>
  // - `_3`: "123"
  std::vector<uint8_t> real_zip = {
    0x50, 0x4B, 0x03, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x13, 0x5F, 0x55, 0xB7, 0xEF,
    0xDC, 0x83, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x5F, 0x31,
    0x55, 0x54, 0x09, 0x00, 0x03, 0xBE, 0xC1, 0x5E, 0x63, 0xC5, 0xC1, 0x5E, 0x63, 0x75, 0x78, 0x0B,
    0x00, 0x01, 0x04, 0xF5, 0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x31, 0x50, 0x4B, 0x03,
    0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x13, 0x5F, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x5F, 0x32, 0x55, 0x54, 0x09,
    0x00, 0x03, 0xC5, 0xC1, 0x5E, 0x63, 0xC5, 0xC1, 0x5E, 0x63, 0x75, 0x78, 0x0B, 0x00, 0x01, 0x04,
    0xF5, 0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x0A, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x4F, 0x13, 0x5F, 0x55, 0xD2, 0x63, 0x48, 0x88, 0x03, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x5F, 0x33, 0x55, 0x54, 0x09, 0x00, 0x03, 0xD6, 0xC1,
    0x5E, 0x63, 0xD7, 0xC1, 0x5E, 0x63, 0x75, 0x78, 0x0B, 0x00, 0x01, 0x04, 0xF5, 0x01, 0x00, 0x00,
    0x04, 0x14, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x50, 0x4B, 0x01, 0x02, 0x1E, 0x03, 0x0A, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x43, 0x13, 0x5F, 0x55, 0xB7, 0xEF, 0xDC, 0x83, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA4, 0x81, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x31, 0x55, 0x54, 0x05, 0x00, 0x03, 0xBE, 0xC1, 0x5E,
    0x63, 0x75, 0x78, 0x0B, 0x00, 0x01, 0x04, 0xF5, 0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00,
    0x50, 0x4B, 0x01, 0x02, 0x1E, 0x03, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x13, 0x5F, 0x55,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x81, 0x3D, 0x00, 0x00, 0x00, 0x5F, 0x32,
    0x55, 0x54, 0x05, 0x00, 0x03, 0xC5, 0xC1, 0x5E, 0x63, 0x75, 0x78, 0x0B, 0x00, 0x01, 0x04, 0xF5,
    0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x50, 0x4B, 0x01, 0x02, 0x1E, 0x03, 0x0A, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x4F, 0x13, 0x5F, 0x55, 0xD2, 0x63, 0x48, 0x88, 0x03, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA4, 0x81, 0x79, 0x00, 0x00, 0x00, 0x5F, 0x33, 0x55, 0x54, 0x05, 0x00, 0x03, 0xD6, 0xC1, 0x5E,
    0x63, 0x75, 0x78, 0x0B, 0x00, 0x01, 0x04, 0xF5, 0x01, 0x00, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00,
    0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0xD8, 0x00, 0x00, 0x00,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };

  zip::ZipArchive ar = zip::ZipArchive::from_bytes(real_zip);
  L_ASSERT(ar.records.size() == 3);
  {
    const zip::ZipFileRecord& record = ar.get_file("_1");
    L_ASSERT(record.size == 1);
    std::string s((const char*)record.data, (const char*)record.data + record.size);
    L_ASSERT(s == "1");
    L_ASSERT(record.crc32 == 0x83dcefb7);
  }
  {
    const zip::ZipFileRecord& record = ar.get_file("_2");
    L_ASSERT(record.size == 0);
    L_ASSERT(record.crc32 == 0x00000000);
  }
  {
    const zip::ZipFileRecord& record = ar.get_file("_3");
    L_ASSERT(record.size == 3);
    std::string s((const char*)record.data, (const char*)record.data + record.size);
    L_ASSERT(s == "123");
    L_ASSERT(record.crc32 == 0x884863d2);
  }
}
